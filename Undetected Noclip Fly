--[[
https://v3rmillion.rip/showthread.php?tid=857067

 if true then return false; end

]]
if not bind then loadstring(game:HttpGet'https://ic3w0lf.xyz/cloud/t/ABBVe6rcECIP1Aw04mm')(); end
if not input then loadstring(game:HttpGet'https://ic3w0lf.xyz/cloud/t/FKyC0IcUfeS1TR')(); end

local player = game:GetService'Players'.LocalPlayer;
local mouse = player:GetMouse();
local camera = workspace.CurrentCamera;
local runservice = game:GetService'RunService';
local uis = game:GetService'UserInputService';

local fly = false;
local sticky = false;
local lsf = 0;
local flySpeed = 50;
local maxSpeed = game.GameId == 1087859240 and 350 or 1500;
local disp;

local gayGames = {
    3016661674; -- rogue lineage checks falling humanoid state lmao
    3541987450; -- rogue lineage uber world
    5208655184; -- gay lineage new gaia
    2809202155; -- yba gay game
};

for i, v in ipairs(gayGames) do
    gayGames[v] = true;
    gayGames[i] = false;
end

local gay = gayGames[game.PlaceId];

shared.sfls = script;

if Drawing then
    disp = shared.fdisp or Drawing.new'Text';
    disp.Text = 'FlySpeed: ' .. flySpeed;
    disp.Size = 18;
    disp.Center = false;
    disp.Outline = true;
    disp.Visible = true;
    disp.Color = Color3.new(1, 1, 1);
    disp.Position = Vector2.new(150, 7);

    shared.fdisp = disp;
end

function IsInZone(Object1, Object2, YCheck) -- broken 2 lazy 2 fix
	if (typeof(Object1) ~= 'Instance' and typeof(Object1) ~= 'table') or (typeof(Object2) ~= 'Instance' and typeof(Object2) ~= 'table') then return 'NIGGER'; end
	if YCheck ~= nil and typeof(YCheck) ~= 'boolean' then return end

    YCheck = (YCheck ~= nil and YCheck or false);

    local RYCheck = true;

    local Object = Object1;
    
    local Positive = (Object2.CFrame * CFrame.new(Object2.Size.X / 2, Object2.Size.Y / 2, Object2.Size.Z / 2));
    local Negative = (Object2.CFrame * CFrame.new(-Object2.Size.X / 2, -Object2.Size.Y / 2, -Object2.Size.Z / 2));

	if YCheck then
		RYCheck = (YCheck == true and
			(Object.Position.Y > Positive.Y) and
			(Object.Position.Y < Negative.Y));
    end

    -- print(1, (Object.Position.X < Positive.X), Object.Position.X, Positive.X)
    -- print(2, (Object.Position.X > Negative.X), Object.Position.X, Negative.X)
    -- print(3, (Object.Position.Z > Positive.Z), Object.Position.Z, Positive.Z)
    -- print(4, (Object.Position.Z < Negative.Z), Object.Position.Z, Negative.Z)
    -- print(5, RYCheck);

    return (Object.Position.X < Positive.X) and
		(Object.Position.X > Negative.X) and
		(Object.Position.Z > Positive.Z) and
        (Object.Position.Z < Negative.Z) and
        (RYCheck);
end

function GetIndex(Table, Value)
    for i, v in pairs(Table) do
        if v == Value then
            return i;
        end
    end

    return -1;
end

local PartIgnore = {};

function DisableClip(Part)
    if Part:IsA'BasePart' and Part.CanCollide then
        local Start = tick();
        local OldTransparency = Part.Transparency;
        
        table.insert(PartIgnore, Part);

        while tick() - Start < 300 and player.Character and player.Character:FindFirstChild'HumanoidRootPart' and not input.down.f4 do
            -- if tick() - Start > 1 and not IsInZone(player.Character.HumanoidRootPart, Part, true) and not IsInZone({Position = camera.CFrame.p}, Part, true) then
                -- break;
            -- end
            if not input.down.leftshift and not input.down.x then
                break;
            end

            Part.CanCollide = false;
            -- if not gay then Part.Transparency = 0.75; end
            Part.Transparency = 0.75;

            wait(1 / 8);
        end

        table.remove(PartIgnore, GetIndex(PartIgnore, Part));

        Part.Transparency = OldTransparency;
        Part.CanCollide = true;
    end
end

local lastDC = 0;

function UpdateUI(t)
    if disp then -- too lazy to make a loop or some bullshit to update this text so i just made it update in here.
        if t then
            disp.Text = t;
        elseif tick() - lsf < 2.5 then
            disp.Text = 'Fly ' .. (fly and 'On' or 'Off');
        else
            disp.Text = 'FlySpeed: ' .. flySpeed;
        end
        disp.Position = Vector2.new(150, tick() - lastDC < 5 and 7 or -100);
    end
end

uis.InputChanged:Connect(function(Input)
    if script ~= shared.sfls then return; end

    if Input.UserInputType == Enum.UserInputType.MouseWheel then
        if input.down.leftcontrol then
            local inc = Input.Position.Z > 0 and 25 or -25;

            flySpeed = math.clamp(flySpeed + (inc * (input.down.leftshift and 2 or 1)), 0, maxSpeed);
            lastDC = tick();
        end
    end

    UpdateUI();
end);

bind('f', function()
    if input.down.leftcontrol then
        fly = not fly;
        lastDC = tick();
        lsf = tick();
        UpdateUI();
    end
end)
bind('n', function()
    if input.down.leftcontrol then
        sticky = not sticky;
    end
end)

local lastSpace = 0;
local plugins = {
    ['2317712696'] = {
        StartFlying = function()
            if shared.Network and shared.PlayerCharacter and shared.OriginalMethods and shared.OriginalMethods.Ragdoll then
                shared.PlayerCharacter.Ragdoll = function() end
                shared.Network:FireServer('EnterRagdoll', true, player.Character);
            end
        end;
        StopFlying = function()
            if shared.Network and shared.PlayerCharacter and shared.OriginalMethods and shared.OriginalMethods.Ragdoll then
                shared.PlayerCharacter.Ragdoll = shared.OriginalMethods.Ragdoll;
                shared.Network:InvokeServer'AttemptGetUp';
            end
        end
    };
    ['3016661674'] = {
        -- StartFlying = function()
        --     if player.Backpack:FindFirstChild'Wooden Chair' then
        --         player.Character.Humanoid:UnequipTools();
        --         local wf = player.Backpack['Wooden Chair'];
        --         wf.Parent = player.Character;
        --     end
            
        --     if player.Character:FindFirstChild'Wooden Chair' then
        --         player.Character['Wooden Chair']:Activate();
        --         player.Character.Humanoid:UnequipTools();
        --     end

        --     spawn(function()
        --         if player.Character:WaitForChild('Chair', 1) then
        --             player.Character.Chair:Destroy();
        --             for i, v in pairs(player.Character.Humanoid:GetPlayingAnimationTracks()) do
        --                 v:Stop();
        --             end
        --         end
        --     end);
        -- end;
        GoingUp = function()
            -- if GetKey and GetKey'Tango' then
            --     local rem = GetKey'Tango';
            --     rem:FireServer({ 1, 3 + math.random() * 0.9 }, {});
            -- end
        end;
        StoppedGoingUp = function()
            -- if GetKey and GetKey'Tango' then
            --     local rem = GetKey'Tango';
            --     rem:FireServer({ 2, 3 + math.random() * 0.9 }, {});
            -- end
        end;
    };
}; plugins['5208655184'] = plugins['3016661674'];
local f = function() end
local wasGoingUp = false;
local plugin = plugins[tostring(game.PlaceId)] or {};

plugin.StartFlying = plugin.StartFlying or f;
plugin.FlySteppedStart = plugin.FlySteppedStart or f;
plugin.GoingUp = plugin.GoingUp or f;
plugin.StoppedGoingUp = plugin.StoppedGoingUp or f;
plugin.FlySteppedEnd = plugin.FlySteppedEnd or f;
plugin.StopFlying = plugin.StopFlying or f

bind_first('x', function()
    if fly and tick() - lastSpace < 0.3 and player.Character and player.Character:FindFirstChild'HumanoidRootPart' and player.Character:FindFirstChildOfClass'Humanoid' then
        local root = player.Character.HumanoidRootPart;
        local hum = player.Character:FindFirstChildOfClass'Humanoid';

        plugin.StartFlying();
        shared.IgnoreHits = true;

        if #PartIgnore > 100 then PartIgnore = {}; end
        
        while input.down.x and fly do
            -- if not gay then hum.PlatformStand = true; end
            plugin.FlySteppedStart();
            local flySpeed = flySpeed;
            local start = mouse.Hit.p;
            local dir = (start - camera.CFrame.p);

            if player.Character:FindFirstChild'FlightOk' then
                lastDC = tick();
                UpdateUI'CanFly';
            end
            
            if not input.down.leftshift and shared.PTarget and shared.PTarget.Character and shared.PTarget.Character:FindFirstChild'HumanoidRootPart' and (shared.PTarget.Character.HumanoidRootPart.Position - root.Position).magnitude < 50 then
                flySpeed = 500;
                dir = (shared.PTarget.Character.HumanoidRootPart.Position - root.Position);
            end

            local vel = dir.unit * (math.random((flySpeed - 1) * 1000, (flySpeed + 2.5) * 1000) / 1000); -- adds random speed so the velocity doesn't always measure to a certain amount (prevents detection)

            if sticky then
                local frontray = Ray.new(root.Position, (root.CFrame.lookVector * 5) - Vector3.new(0, 3.5, 0));
                local floorray = Ray.new(root.Position, Vector3.new(0, -500, 0));

                local frontHit, frontPos = workspace:FindPartOnRayWithIgnoreList(frontray, {player.Character, camera, unpack(PartIgnore)});
                local floorHit, floorPos, norm = workspace:FindPartOnRayWithIgnoreList(floorray, {player.Character, camera});

                if not frontHit and floorHit and (root.Position - floorPos).magnitude > 3.5 then
                    if not floorHit.CanCollide then table.insert(PartIgnore, floorHit); end
                    vel = vel - Vector3.new(0, 300, 0);
                end

                if frontHit and frontHit ~= floorHit and frontHit.CanCollide then
                    if not wasGoingUp then wasGoingUp = true; plugin.GoingUp(); end
                    vel = Vector3.new(0, 125, 0) + (dir.unit * -1);
                    local topRay = Ray.new(root.Position, Vector3.new(0, 4, 0));
                    local topHit, topPos = workspace:FindPartOnRayWithIgnoreList(topRay, {player.Character, camera, unpack(PartIgnore)});
                    if topHit then
                        spawn(function() DisableClip(topHit); end);
                    end
                    table.insert(PartIgnore, floorHit); spawn(function() wait(30) for i, v in pairs(PartIgnore) do if v == floorHit then table.remove(PartIgnore, i); break; end end end)
                elseif not frontHit and wasGoingUp then
                    wasGoingUp = false;
                    plugin.StoppedGoingUp();
                end

                if not frontHit and not floorHit then
                    vel = Vector3.new(vel.x, 0, vel.z);
                end
            end
            
            if hum.SeatPart then
                hum.SeatPart.Velocity = vel;
                table.insert(PartIgnore, hum.SeatPart.Parent);
            else
                root.Velocity = vel;
                local cdir = camera.CFrame.lookVector;
                local pos = root.Position + dir.unit * 10;
                root.CFrame = CFrame.new(root.Position, Vector3.new(pos.X, root.Position.Y, pos.Z));
            end

            local ray = Ray.new(root.Position, sticky and root.CFrame.lookVector * 5 or dir.unit * 50);
            local hit, pos = workspace:FindPartOnRayWithIgnoreList(ray, {player.Character, camera, unpack(PartIgnore)});

            if hit and input.down.leftshift then
                spawn(function() DisableClip(hit); end);
            end

            plugin.FlySteppedEnd();

            runservice.RenderStepped:wait();
        end

        UpdateUI();
        plugin.StoppedGoingUp();
        plugin.StopFlying();
        shared.IgnoreHits = false;
        
        if not gay then
            hum.PlatformStand = false;
            root.Velocity = Vector3.new();
            hum:SetStateEnabled(0, false);
        end
    end

    lastSpace = tick();
end)
